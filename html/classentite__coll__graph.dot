digraph G
{
  bgcolor="transparent";
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{entite\n||+ get_bonus_permanents()\l+ get_effets_permanents()\l+ get_groupe()\l+ get_liste_quete()\l+ get_pos()\l+ in_arene()\l# get_table()\l* $blocage\l* $distance\l* $esquive\l* $incantation\l* $melee\l* $sort_element\l* $sort_mort\l* $sort_vie\l* $comp\l* $competence\l* get_blocage()\l* get_comp()\l* get_comp_combat()\l* get_competence()\l* get_distance()\l* get_esquive()\l* get_incantation()\l* get_melee()\l* get_sort_element()\l* get_sort_mort()\l* get_sort_vie()\l* is_competence()\l* maj_comp()\l* set_comp()\l* $comp_combat\l* $buff\l* add_buff()\l* get_buff()\l* get_buff_only()\l* is_buff()\l* supprime_buff()\l* $compteur_critique\l* get_compteur()\l* get_compteur_critique()\l* set_compteur_critique()\l* $dexterite\l* $energie\l* $force\l* $puissance\l* $vie\l* $volonte\l* get_dexterite()\l* get_energie()\l* get_force()\l* get_puissance()\l* get_vie()\l* get_volonte()\l* set_dexterite()\l* set_volonte()\l* $hp\l* $hp_max\l* $pa\l* add_hp()\l* get_hp()\l* get_hp_max()\l* get_pa()\l* set_hp()\l* set_pa()\l* $level\l* $race\l* $rang_royaume\l* $espece\l* $point_victoire\l* $type\l* $etat\l* get_espece()\l* get_etat()\l* get_exp()\l* get_grade()\l* get_honneur()\l* get_level()\l* get_point_victoire()\l* get_race()\l* get_rang()\l* get_rang_royaume()\l* get_reputation()\l* get_star()\l* get_type()\l* is_type()\l* $arme_degat\l* $arme_type\l* $bouclier_degat\l* $malus_arc\l* $malus_hache\l* $saved_inventaire\l* $enchantement\l* $pm\l* $pm_para\l* $pp\l* bouclier()\l* get_arme()\l* get_arme_degat()\l* get_arme_type()\l* get_bouclier_degat()\l* get_bouclier_type()\l* get_enchantement()\l* get_inventaire()\l* get_pm()\l* get_pm_para()\l* get_pp()\l* set_pm()\l* set_pp()\l* $distance_tir\l* $action\l* $potentiel_bloquer\l* $reserve\l* get_action()\l* get_distance_tir()\l* get_potentiel_parer()\l* get_potentiel_toucher()\l* get_reserve()\l* init_round()\l* set_potentiel_parer()\l* set_potentiel_toucher()\l* set_reserve()\l* $objet_ref\l* get_liste_champs()\l* get_liste_update()\l* get_valeurs_insert()\l* __construct()\l* dump()\l* get_objet()\l* get_bonus_permanents()\l* get_effets_permanents()\l* get_groupe()\l* get_liste_quete()\l* get_pos()\l* in_arene()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node2 [label="{placable\n|# $nom\l# $x\l# $y\l|+ __construct()\l+ get_nom()\l+ get_pos()\l+ get_x()\l+ get_y()\l+ set_nom()\l+ set_x()\l+ set_y()\l# get_liste_champs()\l# get_liste_update()\l# get_valeurs_insert()\l# init_tab()\l}",height=0.2,width=0.4,color="black",URL="$classplacable.html",tooltip="Classe Abstraite placable Cette classe à pour but de définir ce qu&#39;est un objet..."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node3 [label="{table\n|# $champs_modif\l# $id\l|+ __toString()\l+ get_id()\l+ sauver()\l+ set_id()\l+ supprimer()\l+ create()\l+ gen_create()\l# charger()\l# get_champ()\l# get_champ_id()\l# get_liste_champs()\l# get_liste_update()\l# get_table()\l# get_valeurs_insert()\l# init_tab()\l}",height=0.2,width=0.4,color="black",URL="$classtable.html",tooltip="Classe de base pour les objets représentant un élément d&#39;une table dans la..."];
}
